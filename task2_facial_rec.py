# -*- coding: utf-8 -*-
"""task2_facial-rec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_S75yyljzBRQHOJDYH8UhX9Rw7ikltod
"""

from keras.applications import VGG16

model = VGG16(weights = 'imagenet', 
                 include_top = False, 
                 input_shape = (224, 224, 3))

model.summary()

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model



for layer in model.layers:
    layer.trainable = False

top_model = model.output
top_model = Flatten(name = "flatten")(top_model)
top_model = Dense(526, activation = "relu")(top_model)
top_model = Dense(263, activation = "relu")(top_model)
top_model = Dense(2 , activation = "softmax")(top_model)

newmodel = Model(inputs=model.input , outputs=top_model)

newmodel.summary()

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=45,
      width_shift_range=0.3,
      height_shift_range=0.3,
      horizontal_flip=True,
      fill_mode='nearest')
 
validation_datagen = ImageDataGenerator(rescale=1./255)

train_batchsize = 50
val_batchsize = 50
 
train_generator = train_datagen.flow_from_directory(
        'drive/My Drive/data/train_set',
        target_size=(224, 224),
        batch_size=train_batchsize,
        class_mode='categorical')
 
validation_generator = validation_datagen.flow_from_directory(
        'drive/My Drive/data/test_set',
        target_size=(224, 224 ),
        batch_size=val_batchsize,
        class_mode='categorical')

from keras.optimizers import RMSprop

newmodel.compile(loss = 'categorical_crossentropy',
              optimizer = RMSprop( lr = 0.001 ),
              metrics = ['accuracy'])

nb_train_samples = 900
nb_validation_samples = 200
epochs = 3
batch_size = 10
history = newmodel.fit_generator(
    train_generator,
    steps_per_epoch = 25,
    validation_data = validation_generator,
    validation_steps = nb_validation_samples // batch_size,
    epochs = 1)

result_accuracy = history.history['accuracy']

newmodel.save('facial_recog.h5')

newmodel.save('facial_recog.xml')



